// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class TaxCategoryRate extends pulumi.CustomResource {
    /**
     * Get an existing TaxCategoryRate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaxCategoryRateState, opts?: pulumi.CustomResourceOptions): TaxCategoryRate {
        return new TaxCategoryRate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commercetools:index/taxCategoryRate:TaxCategoryRate';

    /**
     * Returns true if the given object is an instance of TaxCategoryRate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TaxCategoryRate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TaxCategoryRate.__pulumiType;
    }

    /**
     * Number Percentage in the range of [0..1]. The sum of the amounts of all subRates, if there are any
     */
    public readonly amount!: pulumi.Output<number | undefined>;
    /**
     * A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     */
    public readonly country!: pulumi.Output<string>;
    public readonly includedInPrice!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The state in the country
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * For countries (for example the US) where the total tax is a combination of multiple taxes (for example state and local
     * taxes)
     */
    public readonly subRates!: pulumi.Output<outputs.TaxCategoryRateSubRate[] | undefined>;
    public readonly taxCategoryId!: pulumi.Output<string>;

    /**
     * Create a TaxCategoryRate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaxCategoryRateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TaxCategoryRateArgs | TaxCategoryRateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TaxCategoryRateState | undefined;
            inputs["amount"] = state ? state.amount : undefined;
            inputs["country"] = state ? state.country : undefined;
            inputs["includedInPrice"] = state ? state.includedInPrice : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["subRates"] = state ? state.subRates : undefined;
            inputs["taxCategoryId"] = state ? state.taxCategoryId : undefined;
        } else {
            const args = argsOrState as TaxCategoryRateArgs | undefined;
            if ((!args || args.country === undefined) && !opts.urn) {
                throw new Error("Missing required property 'country'");
            }
            if ((!args || args.includedInPrice === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includedInPrice'");
            }
            if ((!args || args.taxCategoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taxCategoryId'");
            }
            inputs["amount"] = args ? args.amount : undefined;
            inputs["country"] = args ? args.country : undefined;
            inputs["includedInPrice"] = args ? args.includedInPrice : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["subRates"] = args ? args.subRates : undefined;
            inputs["taxCategoryId"] = args ? args.taxCategoryId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(TaxCategoryRate.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TaxCategoryRate resources.
 */
export interface TaxCategoryRateState {
    /**
     * Number Percentage in the range of [0..1]. The sum of the amounts of all subRates, if there are any
     */
    amount?: pulumi.Input<number>;
    /**
     * A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     */
    country?: pulumi.Input<string>;
    includedInPrice?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * The state in the country
     */
    state?: pulumi.Input<string>;
    /**
     * For countries (for example the US) where the total tax is a combination of multiple taxes (for example state and local
     * taxes)
     */
    subRates?: pulumi.Input<pulumi.Input<inputs.TaxCategoryRateSubRate>[]>;
    taxCategoryId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TaxCategoryRate resource.
 */
export interface TaxCategoryRateArgs {
    /**
     * Number Percentage in the range of [0..1]. The sum of the amounts of all subRates, if there are any
     */
    amount?: pulumi.Input<number>;
    /**
     * A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     */
    country: pulumi.Input<string>;
    includedInPrice: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * The state in the country
     */
    state?: pulumi.Input<string>;
    /**
     * For countries (for example the US) where the total tax is a combination of multiple taxes (for example state and local
     * taxes)
     */
    subRates?: pulumi.Input<pulumi.Input<inputs.TaxCategoryRateSubRate>[]>;
    taxCategoryId: pulumi.Input<string>;
}
