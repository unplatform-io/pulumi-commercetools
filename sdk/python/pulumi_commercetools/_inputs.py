# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ApiExtensionDestinationArgs',
    'ApiExtensionTriggerArgs',
    'CartDiscountTargetArgs',
    'CartDiscountValueArgs',
    'CartDiscountValueMoneyArgs',
    'ProductTypeAttributeArgs',
    'ProductTypeAttributeTypeArgs',
    'ProductTypeAttributeTypeElementType2Args',
    'ProductTypeAttributeTypeElementType2LocalizedValueArgs',
    'ProductTypeAttributeTypeLocalizedValueArgs',
    'ProjectSettingsCartsArgs',
    'ProjectSettingsExternalOauthArgs',
    'ProjectSettingsMessagesArgs',
    'ProjectSettingsShippingRateCartClassificationValueArgs',
    'ShippingZoneLocationArgs',
    'ShippingZoneRateFreeAboveArgs',
    'ShippingZoneRatePriceArgs',
    'ShippingZoneRateShippingRatePriceTierArgs',
    'ShippingZoneRateShippingRatePriceTierPriceArgs',
    'SubscriptionChangeArgs',
    'SubscriptionDestinationArgs',
    'SubscriptionFormatArgs',
    'SubscriptionMessageArgs',
    'TaxCategoryRateSubRateArgs',
    'TypeFieldArgs',
    'TypeFieldTypeArgs',
    'TypeFieldTypeElementType2Args',
    'TypeFieldTypeElementType2LocalizedValueArgs',
    'TypeFieldTypeLocalizedValueArgs',
]

@pulumi.input_type
class ApiExtensionDestinationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_secret: Optional[pulumi.Input[str]] = None,
                 arn: Optional[pulumi.Input[str]] = None,
                 authorization_header: Optional[pulumi.Input[str]] = None,
                 azure_authentication: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_secret is not None:
            pulumi.set(__self__, "access_secret", access_secret)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if authorization_header is not None:
            pulumi.set(__self__, "authorization_header", authorization_header)
        if azure_authentication is not None:
            pulumi.set(__self__, "azure_authentication", azure_authentication)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessSecret")
    def access_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_secret")

    @access_secret.setter
    def access_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_secret", value)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="authorizationHeader")
    def authorization_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_header")

    @authorization_header.setter
    def authorization_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_header", value)

    @property
    @pulumi.getter(name="azureAuthentication")
    def azure_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_authentication")

    @azure_authentication.setter
    def azure_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_authentication", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ApiExtensionTriggerArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resource_type_id: pulumi.Input[str]):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "resource_type_id", resource_type_id)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="resourceTypeId")
    def resource_type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type_id")

    @resource_type_id.setter
    def resource_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type_id", value)


@pulumi.input_type
class CartDiscountTargetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 predicate: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if predicate is not None:
            pulumi.set(__self__, "predicate", predicate)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def predicate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "predicate")

    @predicate.setter
    def predicate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "predicate", value)


@pulumi.input_type
class CartDiscountValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 distribution_channel_id: Optional[pulumi.Input[str]] = None,
                 monies: Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]] = None,
                 permyriad: Optional[pulumi.Input[int]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 supply_channel_id: Optional[pulumi.Input[str]] = None,
                 variant: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if distribution_channel_id is not None:
            pulumi.set(__self__, "distribution_channel_id", distribution_channel_id)
        if monies is not None:
            pulumi.set(__self__, "monies", monies)
        if permyriad is not None:
            pulumi.set(__self__, "permyriad", permyriad)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if supply_channel_id is not None:
            pulumi.set(__self__, "supply_channel_id", supply_channel_id)
        if variant is not None:
            pulumi.set(__self__, "variant", variant)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="distributionChannelId")
    def distribution_channel_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "distribution_channel_id")

    @distribution_channel_id.setter
    def distribution_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribution_channel_id", value)

    @property
    @pulumi.getter
    def monies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]]:
        return pulumi.get(self, "monies")

    @monies.setter
    def monies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]]):
        pulumi.set(self, "monies", value)

    @property
    @pulumi.getter
    def permyriad(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "permyriad")

    @permyriad.setter
    def permyriad(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "permyriad", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="supplyChannelId")
    def supply_channel_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "supply_channel_id")

    @supply_channel_id.setter
    def supply_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supply_channel_id", value)

    @property
    @pulumi.getter
    def variant(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "variant")

    @variant.setter
    def variant(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "variant", value)


@pulumi.input_type
class CartDiscountValueMoneyArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ProductTypeAttributeArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[Mapping[str, Any]],
                 name: pulumi.Input[str],
                 type: pulumi.Input['ProductTypeAttributeTypeArgs'],
                 constraint: Optional[pulumi.Input[str]] = None,
                 input_hint: Optional[pulumi.Input[str]] = None,
                 input_tip: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 searchable: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if input_hint is not None:
            pulumi.set(__self__, "input_hint", input_hint)
        if input_tip is not None:
            pulumi.set(__self__, "input_tip", input_tip)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ProductTypeAttributeTypeArgs']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ProductTypeAttributeTypeArgs']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def constraint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "constraint")

    @constraint.setter
    def constraint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "constraint", value)

    @property
    @pulumi.getter(name="inputHint")
    def input_hint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_hint")

    @input_hint.setter
    def input_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_hint", value)

    @property
    @pulumi.getter(name="inputTip")
    def input_tip(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "input_tip")

    @input_tip.setter
    def input_tip(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "input_tip", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def searchable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "searchable")

    @searchable.setter
    def searchable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "searchable", value)


@pulumi.input_type
class ProductTypeAttributeTypeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 element_type2: Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']] = None,
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 type_reference: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "name", name)
        if element_type2 is not None:
            pulumi.set(__self__, "element_type2", element_type2)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if type_reference is not None:
            pulumi.set(__self__, "type_reference", type_reference)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ElementType2")
    def element_type2(self) -> Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']]:
        return pulumi.get(self, "element_type2")

    @element_type2.setter
    def element_type2(self, value: Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']]):
        pulumi.set(self, "element_type2", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]]:
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter(name="typeReference")
    def type_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type_reference")

    @type_reference.setter
    def type_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_reference", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ProductTypeAttributeTypeElementType2Args:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 type_reference: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "name", name)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if type_reference is not None:
            pulumi.set(__self__, "type_reference", type_reference)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]]:
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter(name="typeReference")
    def type_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type_reference")

    @type_reference.setter
    def type_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_reference", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ProductTypeAttributeTypeElementType2LocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProductTypeAttributeTypeLocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProjectSettingsCartsArgs:
    def __init__(__self__, *,
                 country_tax_rate_fallback_enabled: pulumi.Input[bool],
                 delete_days_after_last_modification: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "country_tax_rate_fallback_enabled", country_tax_rate_fallback_enabled)
        if delete_days_after_last_modification is not None:
            pulumi.set(__self__, "delete_days_after_last_modification", delete_days_after_last_modification)

    @property
    @pulumi.getter(name="countryTaxRateFallbackEnabled")
    def country_tax_rate_fallback_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "country_tax_rate_fallback_enabled")

    @country_tax_rate_fallback_enabled.setter
    def country_tax_rate_fallback_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "country_tax_rate_fallback_enabled", value)

    @property
    @pulumi.getter(name="deleteDaysAfterLastModification")
    def delete_days_after_last_modification(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delete_days_after_last_modification")

    @delete_days_after_last_modification.setter
    def delete_days_after_last_modification(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_days_after_last_modification", value)


@pulumi.input_type
class ProjectSettingsExternalOauthArgs:
    def __init__(__self__, *,
                 authorization_header: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "authorization_header", authorization_header)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authorizationHeader")
    def authorization_header(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization_header")

    @authorization_header.setter
    def authorization_header(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_header", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProjectSettingsMessagesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ProjectSettingsShippingRateCartClassificationValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "key", key)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ShippingZoneLocationArgs:
    def __init__(__self__, *,
                 country: pulumi.Input[str],
                 state: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "country", country)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ShippingZoneRateFreeAboveArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ShippingZoneRatePriceArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ShippingZoneRateShippingRatePriceTierArgs:
    def __init__(__self__, *,
                 price: pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs'],
                 type: pulumi.Input[str],
                 minimum_cent_amount: Optional[pulumi.Input[int]] = None,
                 score: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "type", type)
        if minimum_cent_amount is not None:
            pulumi.set(__self__, "minimum_cent_amount", minimum_cent_amount)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def price(self) -> pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs']:
        return pulumi.get(self, "price")

    @price.setter
    def price(self, value: pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs']):
        pulumi.set(self, "price", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="minimumCentAmount")
    def minimum_cent_amount(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minimum_cent_amount")

    @minimum_cent_amount.setter
    def minimum_cent_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_cent_amount", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ShippingZoneRateShippingRatePriceTierPriceArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class SubscriptionChangeArgs:
    def __init__(__self__, *,
                 resource_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if resource_type_ids is not None:
            pulumi.set(__self__, "resource_type_ids", resource_type_ids)

    @property
    @pulumi.getter(name="resourceTypeIds")
    def resource_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_type_ids")

    @resource_type_ids.setter
    def resource_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_type_ids", value)


@pulumi.input_type
class SubscriptionDestinationArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 type: pulumi.Input[str],
                 uri: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_secret: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 queue_url: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_arn: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_secret is not None:
            pulumi.set(__self__, "access_secret", access_secret)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if queue_url is not None:
            pulumi.set(__self__, "queue_url", queue_url)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_arn is not None:
            pulumi.set(__self__, "topic_arn", topic_arn)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessSecret")
    def access_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_secret")

    @access_secret.setter
    def access_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_secret", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="queueUrl")
    def queue_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_url")

    @queue_url.setter
    def queue_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_url", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class SubscriptionFormatArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cloud_events_version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if cloud_events_version is not None:
            pulumi.set(__self__, "cloud_events_version", cloud_events_version)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cloudEventsVersion")
    def cloud_events_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_events_version")

    @cloud_events_version.setter
    def cloud_events_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_events_version", value)


@pulumi.input_type
class SubscriptionMessageArgs:
    def __init__(__self__, *,
                 resource_type_id: Optional[pulumi.Input[str]] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if resource_type_id is not None:
            pulumi.set(__self__, "resource_type_id", resource_type_id)
        if types is not None:
            pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter(name="resourceTypeId")
    def resource_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type_id")

    @resource_type_id.setter
    def resource_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type_id", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class TaxCategoryRateSubRateArgs:
    def __init__(__self__, *,
                 amount: pulumi.Input[float],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Input[float]:
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: pulumi.Input[float]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TypeFieldArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[Mapping[str, Any]],
                 name: pulumi.Input[str],
                 type: pulumi.Input['TypeFieldTypeArgs'],
                 input_hint: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if input_hint is not None:
            pulumi.set(__self__, "input_hint", input_hint)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TypeFieldTypeArgs']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TypeFieldTypeArgs']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="inputHint")
    def input_hint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_hint")

    @input_hint.setter
    def input_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_hint", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class TypeFieldTypeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 element_type2: Optional[pulumi.Input['TypeFieldTypeElementType2Args']] = None,
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "name", name)
        if element_type2 is not None:
            pulumi.set(__self__, "element_type2", element_type2)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ElementType2")
    def element_type2(self) -> Optional[pulumi.Input['TypeFieldTypeElementType2Args']]:
        return pulumi.get(self, "element_type2")

    @element_type2.setter
    def element_type2(self, value: Optional[pulumi.Input['TypeFieldTypeElementType2Args']]):
        pulumi.set(self, "element_type2", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]]:
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TypeFieldTypeElementType2Args:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "name", name)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]]:
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TypeFieldTypeElementType2LocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TypeFieldTypeLocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


