// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Commercetools
{
    [CommercetoolsResourceType("commercetools:index/shippingZoneRate:ShippingZoneRate")]
    public partial class ShippingZoneRate : Pulumi.CustomResource
    {
        /// <summary>
        /// The shipping is free if the sum of the (custom) line item prices reaches the freeAbove value
        /// </summary>
        [Output("freeAbove")]
        public Output<Outputs.ShippingZoneRateFreeAbove?> FreeAbove { get; private set; } = null!;

        [Output("price")]
        public Output<Outputs.ShippingZoneRatePrice> Price { get; private set; } = null!;

        [Output("shippingMethodId")]
        public Output<string> ShippingMethodId { get; private set; } = null!;

        /// <summary>
        /// A price tier is selected instead of the default price when a certain threshold or specific cart value is reached. If no
        /// tiered price is suitable for the cart, the base price of the shipping rate is used . See also [Shipping Rate Price Tier
        /// API Docs](https://docs.commercetools.com/api/projects/shippingMethods#shippingratepricetier)
        /// </summary>
        [Output("shippingRatePriceTiers")]
        public Output<ImmutableArray<Outputs.ShippingZoneRateShippingRatePriceTier>> ShippingRatePriceTiers { get; private set; } = null!;

        [Output("shippingZoneId")]
        public Output<string> ShippingZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ShippingZoneRate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShippingZoneRate(string name, ShippingZoneRateArgs args, CustomResourceOptions? options = null)
            : base("commercetools:index/shippingZoneRate:ShippingZoneRate", name, args ?? new ShippingZoneRateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ShippingZoneRate(string name, Input<string> id, ShippingZoneRateState? state = null, CustomResourceOptions? options = null)
            : base("commercetools:index/shippingZoneRate:ShippingZoneRate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShippingZoneRate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShippingZoneRate Get(string name, Input<string> id, ShippingZoneRateState? state = null, CustomResourceOptions? options = null)
        {
            return new ShippingZoneRate(name, id, state, options);
        }
    }

    public sealed class ShippingZoneRateArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The shipping is free if the sum of the (custom) line item prices reaches the freeAbove value
        /// </summary>
        [Input("freeAbove")]
        public Input<Inputs.ShippingZoneRateFreeAboveArgs>? FreeAbove { get; set; }

        [Input("price", required: true)]
        public Input<Inputs.ShippingZoneRatePriceArgs> Price { get; set; } = null!;

        [Input("shippingMethodId", required: true)]
        public Input<string> ShippingMethodId { get; set; } = null!;

        [Input("shippingRatePriceTiers")]
        private InputList<Inputs.ShippingZoneRateShippingRatePriceTierArgs>? _shippingRatePriceTiers;

        /// <summary>
        /// A price tier is selected instead of the default price when a certain threshold or specific cart value is reached. If no
        /// tiered price is suitable for the cart, the base price of the shipping rate is used . See also [Shipping Rate Price Tier
        /// API Docs](https://docs.commercetools.com/api/projects/shippingMethods#shippingratepricetier)
        /// </summary>
        public InputList<Inputs.ShippingZoneRateShippingRatePriceTierArgs> ShippingRatePriceTiers
        {
            get => _shippingRatePriceTiers ?? (_shippingRatePriceTiers = new InputList<Inputs.ShippingZoneRateShippingRatePriceTierArgs>());
            set => _shippingRatePriceTiers = value;
        }

        [Input("shippingZoneId", required: true)]
        public Input<string> ShippingZoneId { get; set; } = null!;

        public ShippingZoneRateArgs()
        {
        }
    }

    public sealed class ShippingZoneRateState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The shipping is free if the sum of the (custom) line item prices reaches the freeAbove value
        /// </summary>
        [Input("freeAbove")]
        public Input<Inputs.ShippingZoneRateFreeAboveGetArgs>? FreeAbove { get; set; }

        [Input("price")]
        public Input<Inputs.ShippingZoneRatePriceGetArgs>? Price { get; set; }

        [Input("shippingMethodId")]
        public Input<string>? ShippingMethodId { get; set; }

        [Input("shippingRatePriceTiers")]
        private InputList<Inputs.ShippingZoneRateShippingRatePriceTierGetArgs>? _shippingRatePriceTiers;

        /// <summary>
        /// A price tier is selected instead of the default price when a certain threshold or specific cart value is reached. If no
        /// tiered price is suitable for the cart, the base price of the shipping rate is used . See also [Shipping Rate Price Tier
        /// API Docs](https://docs.commercetools.com/api/projects/shippingMethods#shippingratepricetier)
        /// </summary>
        public InputList<Inputs.ShippingZoneRateShippingRatePriceTierGetArgs> ShippingRatePriceTiers
        {
            get => _shippingRatePriceTiers ?? (_shippingRatePriceTiers = new InputList<Inputs.ShippingZoneRateShippingRatePriceTierGetArgs>());
            set => _shippingRatePriceTiers = value;
        }

        [Input("shippingZoneId")]
        public Input<string>? ShippingZoneId { get; set; }

        public ShippingZoneRateState()
        {
        }
    }
}
